{testCase} from ./helper.civet

describe "strings", ->

  testCase """
    empty
    ---
    x = ""
    ---
    x = ""
  """

  testCase """
    CoffeeScript interpolation empty
    ---
    "civet coffeeInterpolation"
    x = ""
    ---
    x = ""
  """

  testCase """
    a
    ---
    x = "a"
    ---
    x = "a"
  """

  // NOTE: Backslashes are escaped so two here become one in the input
  testCase """
    line continuation
    ---
    x = "a\\
    b"
    ---
    x = "a\\
    b"
  """

  testCase """
    multi-line
    ---
    x = "a
    b"
    ---
    x = "a\\nb"
  """

  testCase """
    escaped backslash then newline
    ---
    x = "a\\\\
    b"
    ---
    x = "a\\\\\\nb"
  """

  testCase """
    escaped backslash then non-escaped backslash then newline
    ---
    x = "a\\\\\\
    b"
    ---
    x = "a\\\\\\
    b"
  """

  // NOTE: the `a` variable is only to make the string not be interpereted as a directive prologue

  testCase '''
    coffee compat string interpolation
    ---
    "civet coffee-compat"
    a
    "a#{b}c"
    ---
    a;
    `a${b}c`
  '''

  testCase '''
    coffee compat string interpolation with ${}
    ---
    "civet coffee-compat"
    a
    "a#{b}c${d}"
    ---
    a;
    `a${b}c\\${d}`
  '''

  testCase '''
    coffee compat string interpolation with escaped octothorpe
    ---
    "civet coffee-compat"
    a
    "a\\#{b}c"
    ---
    a
    "a\\#{b}c"
  '''

  testCase '''
    coffee compat string interpolation with newlines
    ---
    "civet coffee-compat"
    a
    "a
    #{b}c"
    ---
    a;
    `a\\n${b}c`
  '''

  testCase '''
    coffee compat tagged template literal
    ---
    "civet coffee-compat"
    tag"a#{b}c"
    ---
    tag`a${b}c`
  '''

  testCase '''
    coffee compat tagged template literal without interpolation
    ---
    "civet coffee-compat"
    tag"a"
    ---
    tag`a`
  '''

  testCase '''
    triple-quote tagged template literal
    ---
    tag"""a#{b}c"""
    ---
    tag`a${b}c`
  '''

  testCase '''
    multi-line function call in """
    ---
    """
      #{func 1,
      2}
    """
    ---
    `${func(1,
      2)}`
  '''

  testCase '''
    backslash single-word strings
    ---
    support \\single-word-strings
    // they start with a \\backslash
    // they are terminated by ,;])} or whitespace
    [a, b] := [\\comma, \\bracket]
    {c} := {c:\\brace}
    d := paren(\\thesis)
    e := \\semi;
    t = \\t
    // they support escape codes
    tab = \\\\t
    newline = \\\\n
    letter_n = \\n
    backslash = \\\\\\
    ---
    support('single-word-strings')
    // they start with a \\backslash
    // they are terminated by ,;])} or whitespace
    const [a, b] = ['comma', 'bracket']
    const {c} = {c:'brace'}
    const d = paren('thesis')
    const e = 'semi';
    t = 't'
    // they support escape codes
    tab = '\\t'
    newline = '\\n'
    letter_n = 'n'
    backslash = '\\\\'
  '''

  testCase '''
    backslash single-word strings with quotes
    ---
    normal = \\normal
    apostrophe = \\'
    contraction = \\it's
    doubleQuotes = \\"hi!"
    mixedQuotes = \\it's-a-"me"
    ---
    normal = 'normal'
    apostrophe = "'"
    contraction = "it's"
    doubleQuotes = '"hi!"'
    mixedQuotes = 'it\\'s-a-"me"'
  '''

  // LiveScript supports \\ or \\\ for a single backslash literal '\\'
  testCase '''
    single-word backslash compatiblity
    ---
    js_backslash = '\\\\'
    backslash_backslash = \\\\\\
    exceptional_backslash = \\\\
    ---
    js_backslash = '\\\\'
    backslash_backslash = '\\\\'
    exceptional_backslash = '\\\\'
  '''
